from PIL import Image
import numpy as np

def encrypt_image(image_path, key):
    image = Image.open(image_path)
    pixels = np.array(image)

    # Ensure key is within uint8 range
    key = key % 256  

    # Apply XOR operation safely
    encrypted_pixels = np.bitwise_xor(pixels, key)
    encrypted_image = Image.fromarray(encrypted_pixels.astype('uint8'))
    return encrypted_image

def decrypt_image(encrypted_image_path, key):
    encrypted_image = Image.open(encrypted_image_path)
    encrypted_pixels = np.array(encrypted_image)

    key = key % 256  # Ensure key is within uint8 range

    # Reapply XOR to decrypt (since XOR is reversible)
    decrypted_pixels = np.bitwise_xor(encrypted_pixels, key)
    decrypted_image = Image.fromarray(decrypted_pixels.astype('uint8'))
    return decrypted_image

def main():
    print("Image Encryption Tool")
    choice = input("Do you want to (E)ncrypt or (D)ecrypt an image? ").strip().upper()

    if choice not in ['E', 'D']:
        print("Invalid choice. Please select 'E' to Encrypt or 'D' to Decrypt.")
        return

    image_path = input("Enter the path of the image file: ")
    try:
        key = int(input("Enter an encryption key (integer): "))
    except ValueError:
        print("Invalid key. Please enter an integer.")
        return

    if choice == 'E':
        encrypted_image = encrypt_image(image_path, key)
        encrypted_image.save("encrypted_image.png")
        print("Image encrypted and saved as 'encrypted_image.png'.")
    else:
        decrypted_image = decrypt_image(image_path, key)
        decrypted_image.save("decrypted_image.png")
        print("Image decrypted and saved as 'decrypted_image.png'.")

if __name__ == "__main__":
    main()
